./index.js:
===========


//connection
const mongoose=require('mongoose');
mongoose.connect('mongodb://localhost/dbname')
    .then(()=> console.log('DB connected..'))
    .catch(err=> console.log('Could not connected to db..',err));


//schema
const courseSchema=new mongoose.Schema({
    name:{type:String, required:true, minlength5, maxlength:255},
    category: {
        type:String,
        required:true,
        enum:['watch','mobile','phone']   // value must be one of these
    }
    author:String,



    //********** Custom Async validator *****
    tags:{
        type:Array,
        validate:{
            isAsync:true,
            validator: function(v,callback) {
                setTimeout(()=>{
                    // do some async work
                    const result = v && v.length>0;
                    callback(result);
                },4000);
            },
            message: 'A course should have at least one tag.'
        }
    },




    date:{type:Date, default:Date.now},
    isPublished:Boolean,
    price: {
        type:Number,
        required: ()=> { return this.isPublishedm },
        min:10,
        max:40
    }
});


//model
const Course=mongoose.model('Course',courseSchema);



***********************
//create new Course
async function createCourse()
{
    const course=new Course({
        name:'Node.js Course',
        author:'Asad',
        tags:['node','backend'],
        isPublished:true
    });

    try {
    const result=await course.save();
    console.log(result);
    }
    catch (err) {
        console.log(err.message)
    }
}
createCourse();


***********************
//create new Course
async function createCourse()
{
    const course=new Course({
        name:'Node.js Course',
        author:'Asad',
        tags:['node','backend'],
        isPublished:true
    });

    try {
        const isValid= await course.validate();
        if(isValid)
        {
            const result=await course.save();
            console.log(result);
        }

    }
    catch (err) {
        console.log(err.message)
    }
}
createCourse();


